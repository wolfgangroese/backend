// <auto-generated />
using System;
using Cometa.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cometa.Persistence.Migrations
{
    [DbContext(typeof(CometaDbContext))]
    [Migration("20250125150504_MigrationName")]
    partial class MigrationName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cometa.Persistence.Model.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(110)
                        .HasColumnType("character varying(110)")
                        .HasColumnName("created_by");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(110)
                        .HasColumnType("character varying(110)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Prevalence")
                        .HasColumnType("integer")
                        .HasColumnName("prevalence");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.ToTable("skills", (string)null);
                });

            modelBuilder.Entity("Cometa.Persistence.Model.Todo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ChildTodoId")
                        .HasColumnType("uuid")
                        .HasColumnName("child_todo_id");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<int?>("Complexity")
                        .HasColumnType("integer")
                        .HasColumnName("complexity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(110)
                        .HasColumnType("character varying(110)")
                        .HasColumnName("created_by");

                    b.Property<int>("CreationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("creation_status");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("EarliestStartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("earliest_start_date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int?>("EstimatedTime")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_time");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(110)
                        .HasColumnType("character varying(110)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("name");

                    b.Property<Guid?>("NextTodoId")
                        .HasColumnType("uuid")
                        .HasColumnName("next_todo_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid?>("ParentTodoId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_todo_id");

                    b.Property<Guid?>("PreviousTodoId")
                        .HasColumnType("uuid")
                        .HasColumnName("previous_todo_id");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int?>("Rewards")
                        .HasColumnType("integer")
                        .HasColumnName("rewards");

                    b.Property<int?>("SpentTime")
                        .HasColumnType("integer")
                        .HasColumnName("spent_time");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("TodoStatus")
                        .HasColumnType("integer")
                        .HasColumnName("todo_status");

                    b.HasKey("Id")
                        .HasName("pk_todos");

                    b.HasIndex("ChildTodoId")
                        .HasDatabaseName("IX_Todos_ChildTodoId");

                    b.HasIndex("NextTodoId")
                        .HasDatabaseName("IX_Todos_NextTodoId");

                    b.HasIndex("ParentTodoId")
                        .HasDatabaseName("IX_Todos_ParentTodoId");

                    b.HasIndex("PreviousTodoId")
                        .HasDatabaseName("IX_Todos_PreviousTodoId");

                    b.ToTable("todos", (string)null);
                });

            modelBuilder.Entity("TodoSkill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<Guid>("TodoId")
                        .HasColumnType("uuid")
                        .HasColumnName("todo_id");

                    b.HasKey("SkillId", "TodoId")
                        .HasName("pk_todo_skill");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("IX_TodoSkill_SkillId");

                    b.HasIndex("TodoId")
                        .HasDatabaseName("IX_TodoSkill_TodoId");

                    b.ToTable("todo_skill", (string)null);
                });

            modelBuilder.Entity("Cometa.Persistence.Model.Todo", b =>
                {
                    b.HasOne("Cometa.Persistence.Model.Todo", "ChildTodo")
                        .WithMany()
                        .HasForeignKey("ChildTodoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_todos_todos_child_todo_id");

                    b.HasOne("Cometa.Persistence.Model.Todo", "NextTodo")
                        .WithMany()
                        .HasForeignKey("NextTodoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_todos_todos_next_todo_id");

                    b.HasOne("Cometa.Persistence.Model.Todo", "ParentTodo")
                        .WithMany()
                        .HasForeignKey("ParentTodoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_todos_todos_parent_todo_id");

                    b.HasOne("Cometa.Persistence.Model.Todo", "PreviousTodo")
                        .WithMany()
                        .HasForeignKey("PreviousTodoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_todos_todos_previous_todo_id");

                    b.Navigation("ChildTodo");

                    b.Navigation("NextTodo");

                    b.Navigation("ParentTodo");

                    b.Navigation("PreviousTodo");
                });

            modelBuilder.Entity("TodoSkill", b =>
                {
                    b.HasOne("Cometa.Persistence.Model.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_skill_skills_skill_id");

                    b.HasOne("Cometa.Persistence.Model.Todo", null)
                        .WithMany()
                        .HasForeignKey("TodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todo_skill_todos_todo_id");
                });
#pragma warning restore 612, 618
        }
    }
}
